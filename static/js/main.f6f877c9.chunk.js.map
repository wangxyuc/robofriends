{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAAW,IACfC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACnB,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACA,4BAAKF,GACD,2BAAIC,MCkBLK,EAxBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAMf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCHtBW,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OAEI,yBAAKV,UAAU,OACX,2BACIA,UAAU,sCACVW,KAAK,SACLC,YAAY,eACZC,SAAUH,MCCXI,EATA,SAAClB,GAEZ,OACI,yBAAKmB,MAAQ,CAACC,UAAW,SAAUC,OAAQ,WACtCrB,EAAMsB,WCcJC,E,kDAjBX,WAAYvB,GAAO,IAAD,8BACd,cAAMA,IACDwB,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SAAmB,wCAC3BG,KAAK5B,MAAMsB,a,GAdEQ,aCkDbC,G,wDA1CX,aAAc,IAAD,8BACT,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACThB,OAAQ,GACR0B,YAAa,IAJR,E,gEAQQ,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAS,EAAKZ,SAAU,CAACrB,OAAQiC,S,+BAOrC,IAAD,OAECC,EAAiBd,KAAKJ,MAAMhB,OAAOmC,QAAO,SAAAnC,GAC5C,OAAOA,EAAOP,KAAK2C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAGrE,OAAiC,IAA7BhB,KAAKJ,MAAMhB,OAAOsC,OACX,wBAAI1C,UAAU,SAAd,sBAIP,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQkC,W,GApCxBK,IAAMjB,YCIJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.f6f877c9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const{name, email, id} = props;     // destructuring \n    return (\n        <div className='tc bg-light-green dib pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n            <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    // if (true) {\n    //     throw new Error(\"Nooooo!!\");            purposed for error boundary tutorial only\n    // }\n\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                return (\n                    <Card \n                    key={i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email} \n                    />\n                );\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {     // {searchChange} -- destructuring: allows us to grab the props obj and its properties\n    return (\n        \n        <div className='pa2'>\n            <input \n                className='tc pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robot' \n                onChange={searchChange}\n            />\n        </div>\n    )\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\n    return (\n        <div style={ {overflowY: 'scroll', height: '1000px'} }>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) { return <h1>Ooooops.</h1> }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css'\n\n\nclass App extends React.Component {\n\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())      // return response.json\n            .then(users=> {this.setState( {robots: users})});\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});\n    }\n\n    render() {\n\n        const filteredRobots = this.state.robots.filter(robots => {\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        });\n\n        if (this.state.robots.length === 0){\n            return <h1 className='f1 tc'>Loading friends...</h1>\n        }\n\n        return (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}